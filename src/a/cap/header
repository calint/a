#include"pc.h"
//#include<stdio.h>
//#define d(fmt, ...)printf("\n%s:%d: " fmt,__FILE__,__LINE__,__VA_ARGS__);
//#define nl()printf("\n");
//#define p(format,args...)fprintf(stdout,format,##args)
//#define pl(format,args...)p(format,##args);nl()
//#define pi(M, ...) fprintf(stderr, "[INFO] (%s:%d) " M "\n", __FILE__, __LINE__, ##__VA_ARGS__)
//#define pls(stream,format,args...)fprintf(stream,format,##args)
#define pls(stream,format,args...) ;
#define pl(format,args...) ;
//#define out stdout
#define out 0
#define null 0
//typedef size_t      size;
//typedef FILE*       stream;
typedef int      size;
typedef int       stream;
typedef const char* str;
#define int_default 0
#define float_default 0f
#define str_default ""
#define true 1
#define false 0
//typedef struct slot{}slot;
typedef struct field{
    const char*type;
    const char*name;
    size offset;
    size size;
}field;
typedef struct function{
    const char*type;
    const char*name;
    const char*args;
    void(*func)();
}function;
typedef struct struc{
    const char*name;
    size nfields;
    const field*fields;
    size nfuncs;
    const function*funcs;
}struc;
#define offsetof(st, m) ((size)(&((st *)0)->m))
//- -- - -- - - - - - -  ---  -- - - - - - - - - - -   - - - - - - - - - - - - -
static void mem_clear(int address,int nbytes,int color);
static void mem_clear(int address,int nbytes,int colr){
	int*p1=(int*)address;
	while(nbytes--)
		*p1++=colr;
//
//	char*p=address;
//	char c=(char)color;
//	while(nbytes>0)
//		*p++=color;
}
//void osca_keyb_ev();//called from keyboard interrupt when new keycode from keyboard
//static inline void osca_pass(){asm("hlt");}

