notebook{str}
counter{int}
note{str}
name{str}
item{@r name;
	@r counter;
	note;
	
	(@f counter);//  var e=item; let e=item(2); item e(2).to(s);e.to(s); 
	
	@q str query(str);
	name(@f);// only param is inferred to name
	to(stream){}
}

 •• field
default visibility is public

 •• field annotations
@readonly - public access allowed read only
(@protected,@package,@private)

 •• function annotations
@query - query data, open for read, sortof c++ f()const
@gives - gives ownership of memory returned to caller (pointer?)
@stack - stack pointer remains unchanged after function call giving caller ownership of stack allocated memory
(@virtual)
(@protected,@package,@private)

 •• function parameter annotations
@field - assigns parameter to field matching name
@takes - called object takes ownership of parameter (pointer?)

