notebook


class bla{	
	prw int counter;
	pr const char*bla;
	qr const char*get_string();
	bla(@s int counter){}
}
class p{int public;}
class r{int read;}
class w{int write;}

class v{int virtual_func;}
class q{int read_only_func;}
class g{int gives_ownership_of_returned_object;}
class t{int takes_ownership_of_object;}
@s sets parameter in object field with same name






bla{
	int a;
	bla(int b){}
	g void tick(){}
	void update(const float dt){}
}

doc{
function annotation 'g' stack pointer isnt moved after the call giving stack allocated memory in ownership of caller
block annotation 'cd' means synthesize default constructor and destructor
}


foo{
	int tk=10;
}






// sample of cap code
/// compiles to c
f=file(ram,sizeof(ram));
f.info(out);nl();
f.to(out);nl();
f.copy("another",3);
f.to(out);nl();

//f.copy("another",3).to(out);

const size s=f.size_in_bytes();
pl("file size: %lu",s);

//const t=f.size_in_bytes();
//u=f.size_in_bytes()+f.size_in_bytes();

f.to(out);nl();

__block char ch='x';
f.foreach_char_write(^(char*c){
    putchar(*c);
    *c='x';
    putchar(ch++);
});

f.free();






foo{
  tk=1; // default type is integer
  float i; // default value is 0
  to(stream){ // default return is void/self, parameter name induced to 's'
//    pls(s,"\"q\" %p{%d %2.2f}",o,o->tk,o->i);
    a=1;
    float f=2.3;
    a=f;
  }
}

cap{run(){
    pl("hello world");
    char ram[]="hellos. bootsector.  32 bytes..";
    pi("cap compiled");
    pl("sizeof(%s)=%lu B","int",sizeof(int));
    pl("sizeof(%s)=%lu B","float",sizeof(float));
    pl("sizeof(%s)=%lu B","long",sizeof(long));
    pl("sizeof(%s)=%lu B","ram",sizeof(ram));
    pl("%p",foo_mk);
    pl("%p",foo_tk);
    const char*about="comment";
    ram[0]=1;
    foo f=foo_default;
    const int tk=foo_tk(&f);
    pl("%d",tk);
    pl("%d",foo_tk(&f));
    
    foo_tk_(&f,3);
    foo_to(&f,out);
    const foo f2=foo_mk();
    pl("%d",foo_tk(&f2));
    
    foo foos[8];
    for(int i=0;i<8;i++){
        foos[i]=foo_mk();
        foos[i].i=i;
        foo_tk_(&foos[i],i);
    }
    for(int i=0;i<8;i++){
        foo_to(&foos[i],out);
        nl();
    }
}}










